SMB2 DEFINITIONS ::= BEGIN
    EXPORTS PDU;
    PDU_SMB2 ^ PDU ::= (TEST | NEGOTIATE)
    TEST_SMB2 ^ TEST ::= SEQUENCE {
        Header_TEST_SMB2 ^ Header HEADER (SIZE DEFINED)
    } (ENCODED BY CUSTOM)
    < transfer >
    </ transfer >

    HEADER_SMB2 ^ HEADER ::= (HEADER$ASYNC | HEADER$SYNC)
    HEADER$ASYNC_SMB2 ^ HEADER$ASYNC ::= SEQUENCE {
        protoID_HEADER$ASYNC_SMB2 ^ protoID OCTET STRING (SIZE 4 BYTES),
        structureSize_HEADER$ASYNC_SMB2 ^ structureSize INTEGER (SIZE 2 BYTES),
        creditCharge_HEADER$ASYNC_SMB2 ^ creditCharge INTEGER (SIZE 2 BYTES),
        ntStatus_HEADER$ASYNC_SMB2 ^ ntStatus INTEGER (SIZE 4 BYTES),
        command_HEADER$ASYNC_SMB2 ^ command INTEGER (SIZE 2 BYTES),
        creditREQ_HEADER$ASYNC_SMB2 ^ creditREQ INTEGER (SIZE 2 BYTES),
        flags_HEADER$ASYNC_SMB2 ^ flags OCTET STRING (SIZE 4 BYTES),
        nextCommand_HEADER$ASYNC_SMB2 ^ nextCommand INTEGER (SIZE 4 BYTES),
        messageId_HEADER$ASYNC_SMB2 ^ messageId INTEGER (SIZE 8 BYTES),
        asyncId_HEADER$ASYNC_SMB2 ^ asyncId INTEGER (SIZE 8 BYTES),
        sessionId_HEADER$ASYNC_SMB2 ^ sessionId INTEGER (SIZE 8 BYTES),
        signature_HEADER$ASYNC_SMB2 ^ signature OCTET STRING (SIZE 16 BYTES)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {protoID == 0xFE534D42}
        Back {structureSize == 64}
        Back {(flags& 0x00000002) == 2}
    </ transfer >

    HEADER$SYNC_SMB2 ^ HEADER$SYNC ::= SEQUENCE {
        protoID_HEADER$SYNC_SMB2 ^ protoID OCTET STRING (SIZE 4 BYTES),
        structureSize_HEADER$SYNC_SMB2 ^ structureSize INTEGER (SIZE 2 BYTES),
        creditCharge_HEADER$SYNC_SMB2 ^ creditCharge INTEGER (SIZE 2 BYTES),
        ntStatus_HEADER$SYNC_SMB2 ^ ntStatus INTEGER (SIZE 4 BYTES),
        command_HEADER$SYNC_SMB2 ^ command INTEGER (SIZE 2 BYTES),
        creditREQ_HEADER$SYNC_SMB2 ^ creditREQ INTEGER (SIZE 2 BYTES),
        flags_HEADER$SYNC_SMB2 ^ flags OCTET STRING (SIZE 4 BYTES),
        nextCommand_HEADER$SYNC_SMB2 ^ nextCommand INTEGER (SIZE 4 BYTES),
        messageId_HEADER$SYNC_SMB2 ^ messageId INTEGER (SIZE 8 BYTES),
        reserved_HEADER$SYNC_SMB2 ^ reserved INTEGER (SIZE 4 BYTES),
        treeId_HEADER$SYNC_SMB2 ^ treeId INTEGER (SIZE 4 BYTES),
        sessionId_HEADER$SYNC_SMB2 ^ sessionId INTEGER (SIZE 8 BYTES),
        signature_HEADER$SYNC_SMB2 ^ signature OCTET STRING (SIZE 16 BYTES)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {protoID == 0xFE534D42}
        Back {structureSize == 64}
        Back {(flags& 0x00000002) != 2}
    </ transfer >

    NEGOTIATE_SMB2 ^ NEGOTIATE ::= SEQUENCE {
        Header_NEGOTIATE_SMB2 ^ Header HEADER (SIZE DEFINED),
        structureSize_NEGOTIATE_SMB2 ^ structureSize INTEGER (SIZE 2 BYTES),
        dialectCount_NEGOTIATE_SMB2 ^ dialectCount INTEGER (SIZE 2 BYTES),
        securityMode_NEGOTIATE_SMB2 ^ securityMode INTEGER (SIZE 2 BYTES),
        reserved_NEGOTIATE_SMB2 ^ reserved INTEGER (SIZE 2 BYTES),
        capabilities_NEGOTIATE_SMB2 ^ capabilities INTEGER (SIZE 4 BYTES),
        clientGuid_NEGOTIATE_SMB2 ^ clientGuid OCTET STRING (SIZE 16 BYTES),
        negContextOff_NEGOTIATE_SMB2 ^ negContextOff INTEGER (SIZE 4 BYTES),
        negContextCnt_NEGOTIATE_SMB2 ^ negContextCnt INTEGER (SIZE 2 BYTES),
        reserved2_NEGOTIATE_SMB2 ^ reserved2 INTEGER (SIZE 2 BYTES),
        dialects_NEGOTIATE_SMB2 ^ dialects SET OF DIALECT (SIZE CONSTRAINED),
        padding_NEGOTIATE_SMB2 ^ padding OCTET STRING (SIZE CONSTRAINED),
        negContextList_NEGOTIATE_SMB2 ^ negContextList SET OF NEGOTIATECONTEXT (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {securityMode == 0x0001 || securityMode == 0x0002}
        Forward {LENGTH (padding) == (SIZEOF (Header) + 36 + SIZEOF (dialects) - negContextOff)}
        Forward {CARDINALITY (negContextList) == negContextCnt}
    </ transfer >

    DIALECT_SMB2 ^ DIALECT ::= SEQUENCE {
        value_DIALECT_SMB2 ^ value INTEGER (SIZE 2 BYTES)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {value == 0x0202 || value == 0x0210 || value == 0x0300 || value == 0x0302 || value == 0x0311}
    </ transfer >

    NEGOTIATECONTEXT_SMB2 ^ NEGOTIATECONTEXT ::= SEQUENCE {
        contextType_NEGOTIATECONTEXT_SMB2 ^ contextType INTEGER (SIZE 2 BYTES),
        dataLength_NEGOTIATECONTEXT_SMB2 ^ dataLength INTEGER (SIZE 4 BYTES),
        reserved_NEGOTIATECONTEXT_SMB2 ^ reserved INTEGER (SIZE 4 BYTES),
        data_NEGOTIATECONTEXT_SMB2 ^ data CONTEXTDATA (SIZE DEFINED),
        padding_NEGOTIATECONTEXT_SMB2 ^ padding OCTET STRING (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {contextType == 0x0001 || contextType == 0x0002}
        Forward {LENGTH (padding) == (10 + SIZEOF (data) % 8)}
    </ transfer >

    CONTEXTDATA_SMB2 ^ CONTEXTDATA ::= (INTEGRITY | ENCRYPTION)
    INTEGRITY_SMB2 ^ INTEGRITY ::= SEQUENCE {
        hashAlgCnt_INTEGRITY_SMB2 ^ hashAlgCnt INTEGER (SIZE 2 BYTES),
        saltLength_INTEGRITY_SMB2 ^ saltLength INTEGER (SIZE 2 BYTES),
        hashAlg_INTEGRITY_SMB2 ^ hashAlg SET OF HASHALG (SIZE CONSTRAINED),
        salt_INTEGRITY_SMB2 ^ salt OCTET STRING (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Forward {CARDINALITY (hashAlg) == hashAlgCnt}
        Forward {LENGTH (salt) == saltLength}
    </ transfer >

    HASHALG_SMB2 ^ HASHALG ::= SEQUENCE {
        alg_HASHALG_SMB2 ^ alg INTEGER (SIZE 2 BYTES)
    } (ENCODED BY CUSTOM)
    < transfer >
    </ transfer >

    ENCRYPTION_SMB2 ^ ENCRYPTION ::= SEQUENCE {
        cipherCnt_ENCRYPTION_SMB2 ^ cipherCnt INTEGER (SIZE 2 BYTES),
        ciphers_ENCRYPTION_SMB2 ^ ciphers SET OF CIPHER (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Forward {CARDINALITY (ciphers) == cipherCnt}
    </ transfer >

    CIPHER_SMB2 ^ CIPHER ::= SEQUENCE {
        cipherData_CIPHER_SMB2 ^ cipherData INTEGER (SIZE 2 BYTES)
    } (ENCODED BY CUSTOM)
    < transfer >
    </ transfer >

END
