-- SMB2 Protocol

SMB2 DEFINITIONS ::= BEGIN

EXPORTS PDU;

PDU ::= (NEGOTIATE) -- | NEGOTIATE_RESPONSE)

TEST ::= SEQUENCE {
	Header	HEADER (SIZE DEFINED)
} (ENCODED BY CUSTOM)
<transfer>
-- Back { Header.protoID == 0xFE534D42} -- 0xFE 'S' 'M' 'B'
-- Back { Header.structureSize == 64 }
-- Back { Header.command <= 0x0012 }
</transfer>

HEADER ::= (HEADER_SYNC)

-- HEADER_ASYNC ::= SEQUENCE {
-- 	protoID			OCTET STRING (SIZE 4 BYTES),
-- 	structureSize	INTEGER (SIZE 2 BYTES),
-- 	creditCharge	INTEGER (SIZE 2 BYTES),
-- 	ntStatus		INTEGER (SIZE 4 BYTES),
-- 	command			INTEGER (SIZE 2 BYTES),
-- 	creditREQ		INTEGER (SIZE 2 BYTES),
-- 	flags			OCTET STRING (SIZE 4 BYTES),
-- 	nextCommand		INTEGER (SIZE 4 BYTES),
-- 	messageId		INTEGER (SIZE 8 BYTES),
-- 	asyncId			INTEGER (SIZE 8 BYTES),
-- 	sessionId		INTEGER (SIZE 8 BYTES),
-- 	signature		OCTET STRING (SIZE 16 BYTES)
-- } (ENCODED BY CUSTOM)
-- <transfer>
-- Back {protoID == 0xFE534D42} -- 0xFE 'S' 'M' 'B'
-- Back {structureSize == 64 }
-- Back {(flags & 0x00000002) == 2} -- ASYNC bit is set
-- </transfer>

HEADER_SYNC ::= SEQUENCE {
	protoID			OCTET STRING (SIZE 4 BYTES),
	structureSize	INTEGER (SIZE 2 BYTES),
	creditCharge	INTEGER (SIZE 2 BYTES),
	ntStatus		INTEGER (SIZE 4 BYTES),
	command			INTEGER (SIZE 2 BYTES),
	creditREQ		INTEGER (SIZE 2 BYTES),
	flags			OCTET STRING (SIZE 4 BYTES),
	nextCommand		INTEGER (SIZE 4 BYTES),
	messageId		INTEGER (SIZE 8 BYTES),
	reserved		INTEGER (SIZE 4 BYTES),
	treeId			INTEGER (SIZE 4 BYTES),
	sessionId		INTEGER (SIZE 8 BYTES),
	signature		OCTET STRING (SIZE 16 BYTES)
} (ENCODED BY CUSTOM)
<transfer>
Back {protoID == 0x424D53FE} -- 0xFE 'S' 'M' 'B'
Back {structureSize == 64 }
Back {(flags & 0x00000002) != 2} -- ASYNC bit is set
</transfer>

-- For this version, dialects must contain 0x0311
NEGOTIATE ::= SEQUENCE {
	Header	HEADER (SIZE DEFINED),
	structureSize	INTEGER (SIZE 2 BYTES),
	dialectCount	INTEGER (SIZE 2 BYTES),
	securityMode	INTEGER (SIZE 2 BYTES),
	reserved		INTEGER (SIZE 2 BYTES),
	capabilities	INTEGER (SIZE 4 BYTES),
	clientGuid		OCTET STRING (SIZE 16 BYTES),
	negContextOff	INTEGER (SIZE 4 BYTES),
	negContextCnt	INTEGER (SIZE 2 BYTES),
	reserved2		INTEGER (SIZE 2 BYTES),
	dialects		SET OF DIALECT (SIZE CONSTRAINED),
	padding			OCTET STRING (SIZE CONSTRAINED),
	negContextList	SET OF NEGOTIATECONTEXT (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Back {securityMode == 0x0001 || securityMode == 0x0002}
-- Back {EXISTS(dialects) == 0x0311}
Forward {CARDINALITY(dialects) == dialectCount}
Forward {PADDING(padding) == 8 - ((64 + 36 + dialectCount * 2) % 8)}
Forward {CARDINALITY(negContextList) == negContextCnt}
</transfer>

DIALECT ::= SEQUENCE {
	value	INTEGER (SIZE 2 BYTES)
} (ENCODED BY CUSTOM)
<transfer>
Back {value == 0x0202 || value == 0x0210 || value == 0x0300 || value == 0x0302 || value == 0x0311}
</transfer>

NEGOTIATECONTEXT ::= SEQUENCE {
	contextType	INTEGER (SIZE 2 BYTES),
	dataLength	INTEGER (SIZE 2 BYTES),
	reserved 	INTEGER (SIZE 4 BYTES),
	data 		CONTEXTDATA (SIZE DEFINED),
	padding 	OCTET STRING (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Back {contextType == 0x0001 || contextType == 0x0002}
Forward {PADDING(padding) == (8 - ((8 + dataLength) % 8))}
</transfer>

CONTEXTDATA ::= (INTEGRITY | ENCRYPTION)

INTEGRITY ::= SEQUENCE {
	hashAlgCnt	INTEGER (SIZE 2 BYTES),
	saltLength	INTEGER	(SIZE 2 BYTES),
	hashAlg 	SET OF HASHALG (SIZE CONSTRAINED),
	salt 		OCTET STRING (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Forward {CARDINALITY(hashAlg) == hashAlgCnt}
Forward {LENGTH(salt) == saltLength}
</transfer>

HASHALG ::= SEQUENCE {
	alg 	INTEGER (SIZE 2 BYTES)
} (ENCODED BY CUSTOM)
<transfer>
</transfer>

ENCRYPTION ::= SEQUENCE {
	cipherCnt	INTEGER (SIZE 2 BYTES),
	ciphers		SET OF CIPHER (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Forward {CARDINALITY(ciphers) == cipherCnt}
</transfer>

CIPHER ::= SEQUENCE {
	cipherData 	INTEGER (SIZE 2 BYTES)
} (ENCODED BY CUSTOM)
<transfer>
</transfer>

NEGOTIATE_RESPONSE ::= SEQUENCE {
	Header			HEADER (SIZE DEFINED),
	structureSize	INTEGER (SIZE 2 BYTES),
	securityMode	INTEGER (SIZE 2 BYTES),
	dialectRevision	INTEGER (SIZE 2 BYTES),
	negContextCnt	INTEGER (SIZE 2 BYTES),
	serverGuid		OCTET STRING (SIZE 16 BYTES),
	capabilities	INTEGER (SIZE 4 BYTES),
	maxTranSize		INTEGER (SIZE 4 BYTES),
	maxReadSize		INTEGER (SIZE 4 BYTES),
	maxWriteSize	INTEGER (SIZE 4 BYTES),
	syetemTime		INTEGER (SIZE 8 BYTES),
	serverStartTime	INTEGER (SIZE 8 BYTES),
	secBufferOffset	INTEGER (SIZE 2 BYTES),
	secBufferLength	INTEGER (SIZE 2 BYTES),
	negContextOff	INTEGER (SIZE 4 BYTES),
	buffer 			OCTET STRING (SIZE CONSTRAINED),
	padding			OCTET STRING (SIZE CONSTRAINED),
	negContextList	SET OF NEGOTIATECONTEXT_RESPONSE (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Back {structureSize == 65}
Back {securityMode == 0x0001 || securityMode == 0x0002}
-- Back {EXISTS(dialects) == 0x0311}
Forward {LENGTH(buffer) == secBufferLength}
Forward {LENGTH(padding) == 8 - ((64 + 64 + secBufferLength) % 8)}
Forward {CARDINALITY(negContextList) == negContextCnt}
</transfer>

NEGOTIATECONTEXT_RESPONSE ::= SEQUENCE {
	contextType	INTEGER (SIZE 2 BYTES),
	dataLength	INTEGER (SIZE 2 BYTES),
	reserved 	INTEGER (SIZE 4 BYTES),
	data 		CONTEXTDATA_RESPONSE (SIZE DEFINED),
	padding 	OCTET STRING (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Back {contextType == 0x0001 || contextType == 0x0002}
Forward {PADDING(padding) == (8 - ((8 + dataLength) % 8))}
</transfer>

CONTEXTDATA_RESPONSE ::= (INTEGRITY_RESPONSE | ENCRYPTION_RESPONSE)

INTEGRITY_RESPONSE ::= SEQUENCE {
	hashAlgCnt	INTEGER (SIZE 2 BYTES),
	saltLength	INTEGER	(SIZE 2 BYTES),
	hashAlg 	SET OF HASHALG (SIZE CONSTRAINED),
	salt 		OCTET STRING (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Back {hashAlgCnt == 1}
Forward {CARDINALITY(hashAlg) == hashAlgCnt}
Forward {LENGTH(salt) == saltLength}
</transfer>

ENCRYPTION_RESPONSE ::= SEQUENCE {
	cipherCnt	INTEGER (SIZE 2 BYTES),
	ciphers		SET OF CIPHER (SIZE CONSTRAINED)
} (ENCODED BY CUSTOM)
<transfer>
Back {cipherCnt == 1}
Forward {CARDINALITY(ciphers) == cipherCnt}
</transfer>

END