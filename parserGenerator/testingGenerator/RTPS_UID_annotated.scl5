RTPS DEFINITIONS ::= BEGIN
    EXPORTS PDU_RTPS ^ PDU;
    PDU_RTPS ^ PDU ::= (FULL_RTPS | PING_RTPS @ 8 5639707757994659399) < transfer >
    </ transfer >

    PING_RTPS ^ PING @ 8 5639707757994659399 ::= SEQUENCE {
        Header_PING_RTPS ^ Header HEADER_RTPS (SIZE DEFINED),
        ping_PING_RTPS ^ ping OCTET STRING (SIZE 8 BYTES)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {Header_PING_RTPS.protoName_HEADER_RTPS == 'RTPS' || Header_PING_RTPS.protoName_HEADER_RTPS == 'RTPX'}
        Back {ping_PING_RTPS == 5639707757994659399}
    </ transfer >
    FULL_RTPS ^ FULL ::= SEQUENCE {
        Header_FULL_RTPS ^ Header HEADER_RTPS (SIZE DEFINED),
        guidPrefix_FULL_RTPS ^ guidPrefix GUIDPREFIX_RTPS (SIZE DEFINED),
        subMsg_FULL_RTPS ^ subMsg SET OF SUBMESSAGE_RTPS (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {Header_FULL_RTPS.protoName_HEADER_RTPS == 'RTPS' || Header_FULL_RTPS.protoName_HEADER_RTPS == 'RTPX'}
        Forward {END (subMsg_FULL_RTPS)}
        Callback
    </ transfer >
    HEADER_RTPS ^ HEADER ::= SEQUENCE {
        protoName_HEADER_RTPS ^ protoName OCTET STRING (SIZE 4 BYTES),
        version_HEADER_RTPS ^ version INTEGER (SIZE 2 BYTES),
        vendorId_HEADER_RTPS ^ vendorId INTEGER (SIZE 2 BYTES)
    } (ENCODED BY CUSTOM)
    GUIDPREFIX_RTPS ^ GUIDPREFIX ::= SEQUENCE {
        hostID_GUIDPREFIX_RTPS ^ hostID INTEGER (SIZE 4 BYTES),
        appID_GUIDPREFIX_RTPS ^ appID INTEGER (SIZE 4 BYTES),
        counter_GUIDPREFIX_RTPS ^ counter INTEGER (SIZE 4 BYTES)
    } (ENCODED BY CUSTOM)
    SUBMESSAGE_RTPS ^ SUBMESSAGE ::= (DATAPSUB_RTPS @ 1 21 | DATASUB_RTPS @ 1 21 | ACKNACK_RTPS @ 1 6 | HEARTBEAT_RTPS @ 1 7 | INFO$DST_RTPS @ 1 14 |
      INFO$TS_RTPS @ 1 9 | DATAWSUB_RTPS @ 1 21 | DATARSUB_RTPS @ 1 21 | GAP_RTPS @ 1 8)
    DATASUB_RTPS ^ DATASUB @ 1 21 ::= SEQUENCE {
        kind_DATASUB_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_DATASUB_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_DATASUB_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        extraFlags_DATASUB_RTPS ^ extraFlags INTEGER (SIZE 2 BYTES) POS,
        qosOffset_DATASUB_RTPS ^ qosOffset INTEGER (SIZE 2 BYTES),
        readerEnt_DATASUB_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_DATASUB_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerSEQ_DATASUB_RTPS ^ writerSEQ INTEGER (SIZE 8 BYTES),
        inlineQos_DATASUB_RTPS ^ inlineQos QOSPARM_RTPS (SIZE DEFINED) OPTIONAL,
        serializedData_DATASUB_RTPS ^ serializedData OCTET STRING (SIZE CONSTRAINED) POS
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {kind_DATASUB_RTPS == 21}
        Back {writerEnt_DATASUB_RTPS.kind == 2 || writerEnt_DATASUB_RTPS.kind == 3}
        Forward {ENDIANNESS == flags_DATASUB_RTPS& 1}
        Forward {EXISTS (inlineQos_DATASUB_RTPS) == flags_DATASUB_RTPS& 2}
        Forward {LENGTH (serializedData_DATASUB_RTPS) == (nextHeader_DATASUB_RTPS) ? nextHeader_DATASUB_RTPS - (POS (serializedData_DATASUB_RTPS) - POS (
          extraFlags_DATASUB_RTPS)) : PDUREMAINING}
    </ transfer >
    QOSPARM_RTPS ^ QOSPARM ::= SEQUENCE {
        qos_QOSPARM_RTPS ^ qos SET OF QOSPARMS_RTPS (SIZE CONSTRAINED),
    } (ENCODED BY CUSTOM)
    < transfer >
        Forward {TERMINATE (qos_QOSPARM_RTPS) == PIDSENTINAL_RTPS}
        Callback
    </ transfer >
    QOSPARMS_RTPS ^ QOSPARMS @ optimizable ::= (PIDSTATUSINFO_RTPS @ 2 113 @ optimizable | PIDKEYHASH_RTPS @ 2 112 @ optimizable | PIDSENTINAL_RTPS @ 2 1 @
      optimizable)
    PIDSTATUSINFO_RTPS ^ PIDSTATUSINFO @ 2 113 @ optimizable ::= SEQUENCE {
        parameterKind_PIDSTATUSINFO_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDSTATUSINFO_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        flags_PIDSTATUSINFO_RTPS ^ flags OCTET STRING (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {parameterKind_PIDSTATUSINFO_RTPS == 113}
        Forward {LENGTH (flags_PIDSTATUSINFO_RTPS) == parameterLength_PIDSTATUSINFO_RTPS}
    </ transfer >
    PIDKEYHASH_RTPS ^ PIDKEYHASH @ 2 112 @ optimizable ::= SEQUENCE {
        parameterKind_PIDKEYHASH_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDKEYHASH_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        guid_PIDKEYHASH_RTPS ^ guid OCTET STRING (SIZE CONSTRAINED)
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {parameterKind_PIDKEYHASH_RTPS == 112}
        Forward {LENGTH (guid_PIDKEYHASH_RTPS) == parameterLength_PIDKEYHASH_RTPS}
    </ transfer >
    TOPICS_RTPS ^ TOPICS ::= SEQUENCE {
        encapsKind_TOPICS_RTPS ^ encapsKind INTEGER (SIZE 2 BYTES) BIGENDIAN,
        encapsOpts_TOPICS_RTPS ^ encapsOpts INTEGER (SIZE 2 BYTES) BIGENDIAN,
        topicData_TOPICS_RTPS ^ topicData SET OF TOPICPARMS_RTPS (SIZE CONSTRAINED)
    } < transfer >
        Forward {TERMINATE (topicData_TOPICS_RTPS) == PIDSENTINAL_RTPS}
    </ transfer >
    DATAWSUB_RTPS ^ DATAWSUB @ 1 21 ::= SEQUENCE {
        kind_DATAWSUB_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_DATAWSUB_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_DATAWSUB_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        extraFlags_DATAWSUB_RTPS ^ extraFlags INTEGER (SIZE 2 BYTES),
        qosOffset_DATAWSUB_RTPS ^ qosOffset INTEGER (SIZE 2 BYTES),
        readerEnt_DATAWSUB_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_DATAWSUB_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerSEQ_DATAWSUB_RTPS ^ writerSEQ INTEGER (SIZE 8 BYTES),
        inlineQos_DATAWSUB_RTPS ^ inlineQos QOSPARM_RTPS (SIZE DEFINED) OPTIONAL,
        serializedData_DATAWSUB_RTPS ^ serializedData TOPICS_RTPS (SIZE DEFINED) OPTIONAL
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {kind_DATAWSUB_RTPS == 21}
        Back {writerEnt_DATAWSUB_RTPS.key == 3}
        Back {writerEnt_DATAWSUB_RTPS.kind == 194}
        Forward {ENDIANNESS == flags_DATAWSUB_RTPS& 1}
        Forward {EXISTS (inlineQos_DATAWSUB_RTPS) == flags_DATAWSUB_RTPS& 2}
        Forward {EXISTS (serializedData_DATAWSUB_RTPS) == flags_DATAWSUB_RTPS& 12}
    </ transfer >
    TOPICPARMS_RTPS ^ TOPICPARMS @ optimizable ::= (PIDTOPICNAME_RTPS @ 2 5 @ optimizable | PIDTYPENAME_RTPS @ 2 7 @ optimizable | PIDRELIABILITY_RTPS @ 2 26 @
      optimizable | PIDENDPOINTGUID_RTPS @ 2 90 @ optimizable | PIDMULTICASTLOCATOR_RTPS @ 2 48 @ optimizable | PIDUNICASTLOCATOR_RTPS @ 2 47 @ optimizable |
      PIDSENTINAL_RTPS @ 2 1 @ optimizable | PIDUNKNOWN_RTPS @ 2 45058 @ optimizable | PIDACKKIND_RTPS @ 2 32779 @ optimizable | PIDRECVQUEUE_RTPS @ 2 24 @
      optimizable | PIDTIMEBASEDFILTER_RTPS @ 2 4 @ optimizable | PIDLIVELINESS_RTPS @ 2 27 @ optimizable | PIDDURABILITY_RTPS @ 2 29 @ optimizable |
      PIDDIRECTCOMMUNICATION_RTPS @ 2 32785 @ optimizable | PIDOWNERSHIP_RTPS @ 2 31 @ optimizable | PIDPRESENTATION_RTPS @ 2 33 @ optimizable |
      PIDDESTINATIONORDER_RTPS @ 2 37 @ optimizable | PIDDEADLINE_RTPS @ 2 35 @ optimizable | PIDLATENCYBUDGET_RTPS @ 2 39 @ optimizable | PIDGROUPENTITYID_RTPS
      @ 2 83 @ optimizable | PIDENTITYVIRTUALGUID_RTPS @ 2 32770 @ optimizable | PIDSERVICEKIND_RTPS @ 2 32771 @ optimizable | PIDPROTOVERSION_RTPS @ 2 21 @
      optimizable | PIDPRODUCTVERSION_RTPS @ 2 32768 @ optimizable | PIDDISABLEPOSITIVEACKS_RTPS @ 2 32773 @ optimizable | PIDEXPECTSVIRTUALHB_RTPS @ 2 32777 @
      optimizable | PIDTYPECONSISTENCY_RTPS @ 2 116 @ optimizable | PIDTYPEOBJECT_RTPS @ 2 114 @ optimizable | PIDTYPECODE_RTPS @ 2 32772 @ optimizable |
      PIDVENDORID_RTPS @ 2 22 @ optimizable | PIDENTITYNAME_RTPS @ 2 98 @ optimizable | PIDEXPECTSACK_RTPS @ 2 16 @ optimizable | PIDSENDQUEUESIZE_RTPS @ 2 19 @
      optimizable | PIDOWNERSHIPSTRENGTH_RTPS @ 2 6 @ optimizable | PIDPERSISTENCE_RTPS @ 2 3 @ optimizable | PIDLIFESPAN_RTPS @ 2 43 @ optimizable |
      PIDTYPEMAXSIZESERIALIZED_RTPS @ 2 96 @ optimizable | PIDDURABILITYSERVICE_RTPS @ 2 30 @ optimizable)
    PIDTYPEMAXSIZESERIALIZED_RTPS ^ PIDTYPEMAXSIZESERIALIZED @ 2 96 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTYPEMAXSIZESERIALIZED_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTYPEMAXSIZESERIALIZED_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        value_PIDTYPEMAXSIZESERIALIZED_RTPS ^ value OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDTYPEMAXSIZESERIALIZED_RTPS == 96}
        Forward {LENGTH (value_PIDTYPEMAXSIZESERIALIZED_RTPS) == parameterLength_PIDTYPEMAXSIZESERIALIZED_RTPS}
    </ transfer >
    PIDLIFESPAN_RTPS ^ PIDLIFESPAN @ 2 43 @ optimizable ::= SEQUENCE {
        parameterKind_PIDLIFESPAN_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDLIFESPAN_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        leaseDuration_PIDLIFESPAN_RTPS ^ leaseDuration OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDLIFESPAN_RTPS == 43}
        Forward {LENGTH (leaseDuration_PIDLIFESPAN_RTPS) == parameterLength_PIDLIFESPAN_RTPS}
    </ transfer >
    PIDDURABILITYSERVICE_RTPS ^ PIDDURABILITYSERVICE @ 2 30 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDURABILITYSERVICE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDURABILITYSERVICE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        durabilityService_PIDDURABILITYSERVICE_RTPS ^ durabilityService OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDDURABILITYSERVICE_RTPS == 30}
        Forward {LENGTH (durabilityService_PIDDURABILITYSERVICE_RTPS) == parameterLength_PIDDURABILITYSERVICE_RTPS}
    </ transfer >
    PIDPERSISTENCE_RTPS ^ PIDPERSISTENCE @ 2 3 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPERSISTENCE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPERSISTENCE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        leaseDuration_PIDPERSISTENCE_RTPS ^ leaseDuration OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDPERSISTENCE_RTPS == 3}
        Forward {LENGTH (leaseDuration_PIDPERSISTENCE_RTPS) == parameterLength_PIDPERSISTENCE_RTPS}
    </ transfer >
    PIDOWNERSHIPSTRENGTH_RTPS ^ PIDOWNERSHIPSTRENGTH @ 2 6 @ optimizable ::= SEQUENCE {
        parameterKind_PIDOWNERSHIPSTRENGTH_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDOWNERSHIPSTRENGTH_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        strength_PIDOWNERSHIPSTRENGTH_RTPS ^ strength OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDOWNERSHIPSTRENGTH_RTPS == 6}
        Forward {LENGTH (strength_PIDOWNERSHIPSTRENGTH_RTPS) == parameterLength_PIDOWNERSHIPSTRENGTH_RTPS}
    </ transfer >
    PIDSENDQUEUESIZE_RTPS ^ PIDSENDQUEUESIZE @ 2 19 @ optimizable ::= SEQUENCE {
        parameterKind_PIDSENDQUEUESIZE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDSENDQUEUESIZE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        queueSize_PIDSENDQUEUESIZE_RTPS ^ queueSize OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDSENDQUEUESIZE_RTPS == 19}
        Forward {LENGTH (queueSize_PIDSENDQUEUESIZE_RTPS) == parameterLength_PIDSENDQUEUESIZE_RTPS}
    </ transfer >
    PIDEXPECTSACK_RTPS ^ PIDEXPECTSACK @ 2 16 @ optimizable ::= SEQUENCE {
        parameterKind_PIDEXPECTSACK_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDEXPECTSACK_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        expectsAck_PIDEXPECTSACK_RTPS ^ expectsAck OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDEXPECTSACK_RTPS == 16}
        Forward {LENGTH (expectsAck_PIDEXPECTSACK_RTPS) == parameterLength_PIDEXPECTSACK_RTPS}
    </ transfer >
    PIDTYPECODE_RTPS ^ PIDTYPECODE @ 2 32772 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTYPECODE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTYPECODE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        typeObjectCode_PIDTYPECODE_RTPS ^ typeObjectCode OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDTYPECODE_RTPS == 32772}
        Forward {LENGTH (typeObjectCode_PIDTYPECODE_RTPS) == parameterLength_PIDTYPECODE_RTPS}
    </ transfer >
    PIDTYPEOBJECT_RTPS ^ PIDTYPEOBJECT @ 2 114 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTYPEOBJECT_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTYPEOBJECT_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        typeObject_PIDTYPEOBJECT_RTPS ^ typeObject OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDTYPEOBJECT_RTPS == 114}
        Forward {LENGTH (typeObject_PIDTYPEOBJECT_RTPS) == parameterLength_PIDTYPEOBJECT_RTPS}
    </ transfer >
    PIDTYPECONSISTENCY_RTPS ^ PIDTYPECONSISTENCY @ 2 116 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTYPECONSISTENCY_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTYPECONSISTENCY_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        typeConsistencyKind_PIDTYPECONSISTENCY_RTPS ^ typeConsistencyKind TYPECONSISTENCYKIND_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDTYPECONSISTENCY_RTPS == 116}
        Forward {LENGTH (typeConsistencyKind_PIDTYPECONSISTENCY_RTPS) == parameterLength_PIDTYPECONSISTENCY_RTPS}
    </ transfer >
    TYPECONSISTENCYKIND_RTPS ^ TYPECONSISTENCYKIND ::= SEQUENCE {
        kind_TYPECONSISTENCYKIND_RTPS ^ kind INTEGER (SIZE 2 BYTES)
    } PIDEXPECTSVIRTUALHB_RTPS ^ PIDEXPECTSVIRTUALHB @ 2 32777 @ optimizable ::= SEQUENCE {
        parameterKind_PIDEXPECTSVIRTUALHB_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDEXPECTSVIRTUALHB_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        expectsVirtualHB_PIDEXPECTSVIRTUALHB_RTPS ^ expectsVirtualHB FLAG_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDEXPECTSVIRTUALHB_RTPS == 32777}
        Forward {LENGTH (expectsVirtualHB_PIDEXPECTSVIRTUALHB_RTPS) == parameterLength_PIDEXPECTSVIRTUALHB_RTPS}
    </ transfer >
    PIDDISABLEPOSITIVEACKS_RTPS ^ PIDDISABLEPOSITIVEACKS @ 2 32773 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDISABLEPOSITIVEACKS_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDISABLEPOSITIVEACKS_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        disablePositiveAcks_PIDDISABLEPOSITIVEACKS_RTPS ^ disablePositiveAcks FLAG_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDDISABLEPOSITIVEACKS_RTPS == 32773}
        Forward {LENGTH (disablePositiveAcks_PIDDISABLEPOSITIVEACKS_RTPS) == parameterLength_PIDDISABLEPOSITIVEACKS_RTPS}
    </ transfer >
    FLAG_RTPS ^ FLAG ::= SEQUENCE {
        flag_FLAG_RTPS ^ flag INTEGER (SIZE 1 BYTES)
    } PIDSERVICEKIND_RTPS ^ PIDSERVICEKIND @ 2 32771 @ optimizable ::= SEQUENCE {
        parameterKind_PIDSERVICEKIND_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDSERVICEKIND_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        serviceKind_PIDSERVICEKIND_RTPS ^ serviceKind OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDSERVICEKIND_RTPS == 32771}
        Forward {LENGTH (serviceKind_PIDSERVICEKIND_RTPS) == parameterLength_PIDSERVICEKIND_RTPS}
    </ transfer >
    PIDENTITYVIRTUALGUID_RTPS ^ PIDENTITYVIRTUALGUID @ 2 32770 @ optimizable ::= SEQUENCE {
        parameterKind_PIDENTITYVIRTUALGUID_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDENTITYVIRTUALGUID_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        virtualGuid_PIDENTITYVIRTUALGUID_RTPS ^ virtualGuid VIRTUALGUID_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDENTITYVIRTUALGUID_RTPS == 32770}
        Forward {LENGTH (virtualGuid_PIDENTITYVIRTUALGUID_RTPS) == parameterLength_PIDENTITYVIRTUALGUID_RTPS}
    </ transfer >
    VIRTUALGUID_RTPS ^ VIRTUALGUID ::= SEQUENCE {
        guidPrefix_VIRTUALGUID_RTPS ^ guidPrefix GUIDPREFIX_RTPS (SIZE DEFINED) BIGENDIAN,
        virtualGuidSuffix_VIRTUALGUID_RTPS ^ virtualGuidSuffix ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN
    } PIDGROUPENTITYID_RTPS ^ PIDGROUPENTITYID @ 2 83 @ optimizable ::= SEQUENCE {
        parameterKind_PIDGROUPENTITYID_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDGROUPENTITYID_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        groupEntityId_PIDGROUPENTITYID_RTPS ^ groupEntityId ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN SLACK
    } < transfer >
        Back {parameterKind_PIDGROUPENTITYID_RTPS == 83}
        Forward {LENGTH (groupEntityId_PIDGROUPENTITYID_RTPS) == parameterLength_PIDGROUPENTITYID_RTPS}
    </ transfer >
    PIDLATENCYBUDGET_RTPS ^ PIDLATENCYBUDGET @ 2 39 @ optimizable ::= SEQUENCE {
        parameterKind_PIDLATENCYBUDGET_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDLATENCYBUDGET_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        leaseDuration_PIDLATENCYBUDGET_RTPS ^ leaseDuration OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDLATENCYBUDGET_RTPS == 39}
        Forward {LENGTH (leaseDuration_PIDLATENCYBUDGET_RTPS) == parameterLength_PIDLATENCYBUDGET_RTPS}
    </ transfer >
    PIDDEADLINE_RTPS ^ PIDDEADLINE @ 2 35 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDEADLINE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDEADLINE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        leaseDuration_PIDDEADLINE_RTPS ^ leaseDuration OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDDEADLINE_RTPS == 35}
        Forward {LENGTH (leaseDuration_PIDDEADLINE_RTPS) == parameterLength_PIDDEADLINE_RTPS}
    </ transfer >
    PIDDESTINATIONORDER_RTPS ^ PIDDESTINATIONORDER @ 2 37 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDESTINATIONORDER_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDESTINATIONORDER_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        kind_PIDDESTINATIONORDER_RTPS ^ kind OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDDESTINATIONORDER_RTPS == 37}
        Forward {LENGTH (kind_PIDDESTINATIONORDER_RTPS) == parameterLength_PIDDESTINATIONORDER_RTPS}
    </ transfer >
    PIDPRESENTATION_RTPS ^ PIDPRESENTATION @ 2 33 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPRESENTATION_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPRESENTATION_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        presentation_PIDPRESENTATION_RTPS ^ presentation PRESENTATION_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDPRESENTATION_RTPS == 33}
        Forward {LENGTH (presentation_PIDPRESENTATION_RTPS) == parameterLength_PIDPRESENTATION_RTPS}
    </ transfer >
    PRESENTATION_RTPS ^ PRESENTATION ::= SEQUENCE {
        accessScope_PRESENTATION_RTPS ^ accessScope INTEGER (SIZE 4 BYTES),
        coherentAccess_PRESENTATION_RTPS ^ coherentAccess INTEGER (SIZE 1 BYTES),
        orderedAccess_PRESENTATION_RTPS ^ orderedAccess INTEGER (SIZE 1 BYTES)
    } PIDOWNERSHIP_RTPS ^ PIDOWNERSHIP @ 2 31 @ optimizable ::= SEQUENCE {
        parameterKind_PIDOWNERSHIP_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDOWNERSHIP_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        kind_PIDOWNERSHIP_RTPS ^ kind OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDOWNERSHIP_RTPS == 31}
        Forward {LENGTH (kind_PIDOWNERSHIP_RTPS) == parameterLength_PIDOWNERSHIP_RTPS}
    </ transfer >
    PIDDIRECTCOMMUNICATION_RTPS ^ PIDDIRECTCOMMUNICATION @ 2 32785 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDIRECTCOMMUNICATION_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDIRECTCOMMUNICATION_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        directCommunication_PIDDIRECTCOMMUNICATION_RTPS ^ directCommunication DIRECTCOMMUNICATION_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDDIRECTCOMMUNICATION_RTPS == 32785}
        Forward {LENGTH (directCommunication_PIDDIRECTCOMMUNICATION_RTPS) == parameterLength_PIDDIRECTCOMMUNICATION_RTPS}
    </ transfer >
    DIRECTCOMMUNICATION_RTPS ^ DIRECTCOMMUNICATION ::= SEQUENCE {
        directCommunication_DIRECTCOMMUNICATION_RTPS ^ directCommunication INTEGER (SIZE 1 BYTES)
    } PIDDURABILITY_RTPS ^ PIDDURABILITY @ 2 29 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDURABILITY_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDURABILITY_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        durability_PIDDURABILITY_RTPS ^ durability OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDDURABILITY_RTPS == 29}
        Forward {LENGTH (durability_PIDDURABILITY_RTPS) == parameterLength_PIDDURABILITY_RTPS}
    </ transfer >
    PIDLIVELINESS_RTPS ^ PIDLIVELINESS @ 2 27 @ optimizable ::= SEQUENCE {
        parameterKind_PIDLIVELINESS_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDLIVELINESS_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        liveliness_PIDLIVELINESS_RTPS ^ liveliness OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDLIVELINESS_RTPS == 27}
        Forward {LENGTH (liveliness_PIDLIVELINESS_RTPS) == parameterLength_PIDLIVELINESS_RTPS}
    </ transfer >
    PIDTIMEBASEDFILTER_RTPS ^ PIDTIMEBASEDFILTER @ 2 4 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTIMEBASEDFILTER_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTIMEBASEDFILTER_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        leaseDuration_PIDTIMEBASEDFILTER_RTPS ^ leaseDuration OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDTIMEBASEDFILTER_RTPS == 4}
        Forward {LENGTH (leaseDuration_PIDTIMEBASEDFILTER_RTPS) == parameterLength_PIDTIMEBASEDFILTER_RTPS}
    </ transfer >
    PIDRECVQUEUE_RTPS ^ PIDRECVQUEUE @ 2 24 @ optimizable ::= SEQUENCE {
        parameterKind_PIDRECVQUEUE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDRECVQUEUE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        queueSize_PIDRECVQUEUE_RTPS ^ queueSize OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDRECVQUEUE_RTPS == 24}
        Forward {LENGTH (queueSize_PIDRECVQUEUE_RTPS) == parameterLength_PIDRECVQUEUE_RTPS}
    </ transfer >
    PIDACKKIND_RTPS ^ PIDACKKIND @ 2 32779 @ optimizable ::= SEQUENCE {
        parameterKind_PIDACKKIND_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDACKKIND_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        ackKind_PIDACKKIND_RTPS ^ ackKind OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDACKKIND_RTPS == 32779}
        Forward {LENGTH (ackKind_PIDACKKIND_RTPS) == parameterLength_PIDACKKIND_RTPS}
    </ transfer >
    PIDTOPICNAME_RTPS ^ PIDTOPICNAME @ 2 5 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTOPICNAME_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTOPICNAME_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        topicName_PIDTOPICNAME_RTPS ^ topicName NESTEDSTRING_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDTOPICNAME_RTPS == 5}
        Forward {LENGTH (topicName_PIDTOPICNAME_RTPS) == parameterLength_PIDTOPICNAME_RTPS}
    </ transfer >
    PIDUNKNOWN_RTPS ^ PIDUNKNOWN @ 2 45058 @ optimizable ::= SEQUENCE {
        parameterKind_PIDUNKNOWN_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        slackBytes_PIDUNKNOWN_RTPS ^ slackBytes OCTET STRING (SIZE 18 BYTES)
    } < transfer >
        Back {parameterKind_PIDUNKNOWN_RTPS == 45058}
    </ transfer >
    PIDTYPENAME_RTPS ^ PIDTYPENAME @ 2 7 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTYPENAME_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTYPENAME_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        typeName_PIDTYPENAME_RTPS ^ typeName NESTEDSTRING_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDTYPENAME_RTPS == 7}
        Forward {LENGTH (typeName_PIDTYPENAME_RTPS) == parameterLength_PIDTYPENAME_RTPS}
    </ transfer >
    NESTEDSTRING_RTPS ^ NESTEDSTRING ::= SEQUENCE {
        nameLength_NESTEDSTRING_RTPS ^ nameLength INTEGER (SIZE 4 BYTES),
        name_NESTEDSTRING_RTPS ^ name OCTET STRING (SIZE CONSTRAINED),
    } < transfer >
        Forward {LENGTH (name_NESTEDSTRING_RTPS) == nameLength_NESTEDSTRING_RTPS}
    </ transfer >
    PIDRELIABILITY_RTPS ^ PIDRELIABILITY @ 2 26 @ optimizable ::= SEQUENCE {
        parameterKind_PIDRELIABILITY_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDRELIABILITY_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        reliabilityQOS_PIDRELIABILITY_RTPS ^ reliabilityQOS INTEGER (SIZE 4 BYTES),
        slack_PIDRELIABILITY_RTPS ^ slack OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDRELIABILITY_RTPS == 26}
        Forward {LENGTH (slack_PIDRELIABILITY_RTPS) == parameterLength_PIDRELIABILITY_RTPS - SIZEOF (reliabilityQOS_PIDRELIABILITY_RTPS)}
    </ transfer >
    PIDENDPOINTGUID_RTPS ^ PIDENDPOINTGUID @ 2 90 @ optimizable ::= SEQUENCE {
        parameterKind_PIDENDPOINTGUID_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDENDPOINTGUID_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        participantGUID_PIDENDPOINTGUID_RTPS ^ participantGUID GUIDPREFIX_RTPS (SIZE DEFINED) BIGENDIAN,
        entityID_PIDENDPOINTGUID_RTPS ^ entityID ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN
    } < transfer >
        Back {parameterKind_PIDENDPOINTGUID_RTPS == 90}
    </ transfer >
    PIDMULTICASTLOCATOR_RTPS ^ PIDMULTICASTLOCATOR @ 2 48 @ optimizable ::= SEQUENCE {
        parameterKind_PIDMULTICASTLOCATOR_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDMULTICASTLOCATOR_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        locator_PIDMULTICASTLOCATOR_RTPS ^ locator LOCATOR_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDMULTICASTLOCATOR_RTPS == 48}
        Forward {LENGTH (locator_PIDMULTICASTLOCATOR_RTPS) == parameterLength_PIDMULTICASTLOCATOR_RTPS}
    </ transfer >
    PIDUNICASTLOCATOR_RTPS ^ PIDUNICASTLOCATOR @ 2 47 @ optimizable ::= SEQUENCE {
        parameterKind_PIDUNICASTLOCATOR_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDUNICASTLOCATOR_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        locator_PIDUNICASTLOCATOR_RTPS ^ locator LOCATOR_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDUNICASTLOCATOR_RTPS == 47}
        Forward {LENGTH (locator_PIDUNICASTLOCATOR_RTPS) == parameterLength_PIDUNICASTLOCATOR_RTPS}
    </ transfer >
    PARTICIPANTS_RTPS ^ PARTICIPANTS ::= SEQUENCE {
        encapsKind_PARTICIPANTS_RTPS ^ encapsKind INTEGER (SIZE 2 BYTES) BIGENDIAN,
        encapsOpts_PARTICIPANTS_RTPS ^ encapsOpts INTEGER (SIZE 2 BYTES) BIGENDIAN,
        particData_PARTICIPANTS_RTPS ^ particData SET OF PARTICIPANTPARAMS_RTPS (SIZE CONSTRAINED)
    } < transfer >
        Forward {TERMINATE (particData_PARTICIPANTS_RTPS) == PIDSENTINAL_RTPS}
    </ transfer >
    DATAPSUB_RTPS ^ DATAPSUB @ 1 21 ::= SEQUENCE {
        kind_DATAPSUB_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_DATAPSUB_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_DATAPSUB_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        extraFlags_DATAPSUB_RTPS ^ extraFlags INTEGER (SIZE 2 BYTES),
        qosOffset_DATAPSUB_RTPS ^ qosOffset INTEGER (SIZE 2 BYTES),
        readerEnt_DATAPSUB_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_DATAPSUB_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerSEQ_DATAPSUB_RTPS ^ writerSEQ INTEGER (SIZE 8 BYTES),
        inlineQos_DATAPSUB_RTPS ^ inlineQos QOSPARM_RTPS (SIZE DEFINED) OPTIONAL,
        serializedData_DATAPSUB_RTPS ^ serializedData PARTICIPANTS_RTPS (SIZE DEFINED) OPTIONAL
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {kind_DATAPSUB_RTPS == 21}
        Back {writerEnt_DATAPSUB_RTPS.key == 256}
        Back {writerEnt_DATAPSUB_RTPS.kind == 194}
        Forward {ENDIANNESS == flags_DATAPSUB_RTPS& 1}
        Forward {EXISTS (inlineQos_DATAPSUB_RTPS) == flags_DATAPSUB_RTPS& 2}
        Forward {EXISTS (serializedData_DATAPSUB_RTPS) == flags_DATAPSUB_RTPS& 12}
    </ transfer >
    DATARSUB_RTPS ^ DATARSUB @ 1 21 ::= SEQUENCE {
        kind_DATARSUB_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_DATARSUB_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_DATARSUB_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        extraFlags_DATARSUB_RTPS ^ extraFlags INTEGER (SIZE 2 BYTES),
        qosOffset_DATARSUB_RTPS ^ qosOffset INTEGER (SIZE 2 BYTES),
        readerEnt_DATARSUB_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_DATARSUB_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerSEQ_DATARSUB_RTPS ^ writerSEQ INTEGER (SIZE 8 BYTES),
        inlineQos_DATARSUB_RTPS ^ inlineQos QOSPARM_RTPS (SIZE DEFINED) OPTIONAL,
        serializedData_DATARSUB_RTPS ^ serializedData TOPICS_RTPS (SIZE DEFINED) OPTIONAL
    } (ENCODED BY CUSTOM)
    < transfer >
        Back {kind_DATARSUB_RTPS == 21}
        Back {writerEnt_DATARSUB_RTPS.key == 4}
        Back {writerEnt_DATARSUB_RTPS.kind == 194}
        Forward {ENDIANNESS == flags_DATARSUB_RTPS& 1}
        Forward {EXISTS (inlineQos_DATARSUB_RTPS) == flags_DATARSUB_RTPS& 2}
        Forward {EXISTS (serializedData_DATARSUB_RTPS) == flags_DATARSUB_RTPS& 12}
    </ transfer >
    INFO$DST_RTPS ^ INFO$DST @ 1 14 ::= SEQUENCE {
        kind_INFO$DST_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_INFO$DST_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_INFO$DST_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        guidPfx_INFO$DST_RTPS ^ guidPfx GUIDPREFIX_RTPS (SIZE DEFINED) BIGENDIAN
    } < transfer >
        Back {kind_INFO$DST_RTPS == 14}
        Forward {ENDIANNESS == flags_INFO$DST_RTPS& 1}
    </ transfer >
    INFO$TS_RTPS ^ INFO$TS @ 1 9 ::= SEQUENCE {
        kind_INFO$TS_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_INFO$TS_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_INFO$TS_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        timeStamp_INFO$TS_RTPS ^ timeStamp OCTET STRING (SIZE 8 BYTES)
    } < transfer >
        Back {kind_INFO$TS_RTPS == 9}
        Forward {ENDIANNESS == flags_INFO$TS_RTPS& 1}
    </ transfer >
    ACKNACK_RTPS ^ ACKNACK @ 1 6 ::= SEQUENCE {
        kind_ACKNACK_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_ACKNACK_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_ACKNACK_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        readerEnt_ACKNACK_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_ACKNACK_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        readerSN_ACKNACK_RTPS ^ readerSN SNSTATE_RTPS (SIZE DEFINED),
        counter_ACKNACK_RTPS ^ counter INTEGER (SIZE 4 BYTES)
    } < transfer >
        Back {kind_ACKNACK_RTPS == 6}
        Forward {ENDIANNESS == flags_ACKNACK_RTPS& 1}
    </ transfer >
    HEARTBEAT_RTPS ^ HEARTBEAT @ 1 7 ::= SEQUENCE {
        kind_HEARTBEAT_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_HEARTBEAT_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_HEARTBEAT_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        readerEnt_HEARTBEAT_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_HEARTBEAT_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        firstSeq_HEARTBEAT_RTPS ^ firstSeq OCTET STRING (SIZE 8 BYTES),
        lastSeq_HEARTBEAT_RTPS ^ lastSeq OCTET STRING (SIZE 8 BYTES),
        count_HEARTBEAT_RTPS ^ count INTEGER (SIZE 4 BYTES)
    } < transfer >
        Back {kind_HEARTBEAT_RTPS == 7}
        Forward {ENDIANNESS == flags_HEARTBEAT_RTPS& 1}
    </ transfer >
    GAP_RTPS ^ GAP @ 1 8 ::= SEQUENCE {
        kind_GAP_RTPS ^ kind INTEGER (SIZE 1 BYTES),
        flags_GAP_RTPS ^ flags INTEGER (SIZE 1 BYTES),
        nextHeader_GAP_RTPS ^ nextHeader INTEGER (SIZE 2 BYTES),
        readerEnt_GAP_RTPS ^ readerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        writerEnt_GAP_RTPS ^ writerEnt ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN,
        gapStart_GAP_RTPS ^ gapStart INTEGER (SIZE 8 BYTES),
        snState_GAP_RTPS ^ snState SNSTATE_RTPS (SIZE DEFINED)
    } < transfer >
        Back {kind_GAP_RTPS == 8}
        Forward {ENDIANNESS == flags_GAP_RTPS& 1}
    </ transfer >
    PARTICIPANTPARAMS_RTPS ^ PARTICIPANTPARAMS @ optimizable ::= (PIDPROTOVERSION_RTPS @ 2 21 @ optimizable | PIDPARTICIPANTGUID_RTPS @ 2 80 @ optimizable |
      PIDVENDORID_RTPS @ 2 22 @ optimizable | PIDPARTICIPANTBUILTENDPOINTS_RTPS @ 2 68 @ optimizable | PIDBUILTINENDPOINTSET_RTPS @ 2 88 @ optimizable |
      PIDMETATRAFFICUNILOCATOR_RTPS @ 2 50 @ optimizable | PIDDEFMULTILOCATOR_RTPS @ 2 72 @ optimizable | PIDPARTICIPANTLIVECOUNT_RTPS @ 2 52 @ optimizable |
      PIDPARTICIPANTLEASE_RTPS @ 2 2 @ optimizable | PIDSENTINAL_RTPS @ 2 1 @ optimizable | PIDDEFUNILOCATOR_RTPS @ 2 49 @ optimizable |
      PIDMETATRAFFICMULTILOCATOR_RTPS @ 2 51 @ optimizable | PIDPROPERTYLIST_RTPS @ 2 89 @ optimizable | PIDENTITYNAME_RTPS @ 2 98 @ optimizable |
      PIDROLENAME_RTPS @ 2 32778 @ optimizable | PIDPEERHOSTEPOCH_RTPS @ 2 32782 @ optimizable | PIDDOMAINID_RTPS @ 2 32783 @ optimizable |
      PIDTRANSPORTINFOLIST_RTPS @ 2 32784 @ optimizable | PIDPRODUCTVERSION_RTPS @ 2 32768 @ optimizable)
    PIDPRODUCTVERSION_RTPS ^ PIDPRODUCTVERSION @ 2 32768 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPRODUCTVERSION_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPRODUCTVERSION_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        productVersion_PIDPRODUCTVERSION_RTPS ^ productVersion PRODUCTVERSION_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDPRODUCTVERSION_RTPS == 32768}
        Forward {LENGTH (productVersion_PIDPRODUCTVERSION_RTPS) == parameterLength_PIDPRODUCTVERSION_RTPS}
    </ transfer >
    PRODUCTVERSION_RTPS ^ PRODUCTVERSION ::= SEQUENCE {
        major_PRODUCTVERSION_RTPS ^ major INTEGER (SIZE 1 BYTES),
        minor_PRODUCTVERSION_RTPS ^ minor INTEGER (SIZE 1 BYTES),
        release_PRODUCTVERSION_RTPS ^ release INTEGER (SIZE 1 BYTES),
        revision_PRODUCTVERSION_RTPS ^ revision INTEGER (SIZE 1 BYTES)
    } PIDTRANSPORTINFOLIST_RTPS ^ PIDTRANSPORTINFOLIST @ 2 32784 @ optimizable ::= SEQUENCE {
        parameterKind_PIDTRANSPORTINFOLIST_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDTRANSPORTINFOLIST_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        transports_PIDTRANSPORTINFOLIST_RTPS ^ transports TRANSPORTS_RTPS (SIZE DEFINED)
    } < transfer >
        Back {parameterKind_PIDTRANSPORTINFOLIST_RTPS == 32784}
        Forward {LENGTH (transports_PIDTRANSPORTINFOLIST_RTPS) == parameterLength_PIDTRANSPORTINFOLIST_RTPS}
    </ transfer >
    TRANSPORTS_RTPS ^ TRANSPORTS ::= SEQUENCE {
        transportNum_TRANSPORTS_RTPS ^ transportNum INTEGER (SIZE 4 BYTES),
        info_TRANSPORTS_RTPS ^ info SET OF TRANSPORTINFO_RTPS (SIZE CONSTRAINED)
    } < transfer >
        Forward {CARDINALITY (info_TRANSPORTS_RTPS) == transportNum_TRANSPORTS_RTPS}
    </ transfer >
    TRANSPORTINFO_RTPS ^ TRANSPORTINFO ::= SEQUENCE {
        classID_TRANSPORTINFO_RTPS ^ classID INTEGER (SIZE 4 BYTES),
        messageSizeMax_TRANSPORTINFO_RTPS ^ messageSizeMax INTEGER (SIZE 4 BYTES)
    } PIDDOMAINID_RTPS ^ PIDDOMAINID @ 2 32783 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDOMAINID_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDOMAINID_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        domainId_PIDDOMAINID_RTPS ^ domainId OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDDOMAINID_RTPS == 32783}
        Forward {LENGTH (domainId_PIDDOMAINID_RTPS) == parameterLength_PIDDOMAINID_RTPS}
    </ transfer >
    PIDPEERHOSTEPOCH_RTPS ^ PIDPEERHOSTEPOCH @ 2 32782 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPEERHOSTEPOCH_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPEERHOSTEPOCH_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        hostEpoch_PIDPEERHOSTEPOCH_RTPS ^ hostEpoch OCTET STRING (SIZE CONSTRAINED)
    } < transfer >
        Back {parameterKind_PIDPEERHOSTEPOCH_RTPS == 32782}
        Forward {LENGTH (hostEpoch_PIDPEERHOSTEPOCH_RTPS) == parameterLength_PIDPEERHOSTEPOCH_RTPS}
    </ transfer >
    PIDROLENAME_RTPS ^ PIDROLENAME @ 2 32778 @ optimizable ::= SEQUENCE {
        parameterKind_PIDROLENAME_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDROLENAME_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        roleName_PIDROLENAME_RTPS ^ roleName NESTEDSTRING_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDROLENAME_RTPS == 32778}
        Forward {LENGTH (roleName_PIDROLENAME_RTPS) == parameterLength_PIDROLENAME_RTPS}
    </ transfer >
    PIDENTITYNAME_RTPS ^ PIDENTITYNAME @ 2 98 @ optimizable ::= SEQUENCE {
        parameterKind_PIDENTITYNAME_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDENTITYNAME_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        entityName_PIDENTITYNAME_RTPS ^ entityName NESTEDSTRING_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDENTITYNAME_RTPS == 98}
        Forward {LENGTH (entityName_PIDENTITYNAME_RTPS) == parameterLength_PIDENTITYNAME_RTPS}
    </ transfer >
    PIDPROPERTYLIST_RTPS ^ PIDPROPERTYLIST @ 2 89 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPROPERTYLIST_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPROPERTYLIST_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        properties_PIDPROPERTYLIST_RTPS ^ properties PROPERTYLIST_RTPS (SIZE DEFINED)
    } < transfer >
        Back {parameterKind_PIDPROPERTYLIST_RTPS == 89}
        Forward {LENGTH (properties_PIDPROPERTYLIST_RTPS) == parameterLength_PIDPROPERTYLIST_RTPS}
    </ transfer >
    PROPERTYLIST_RTPS ^ PROPERTYLIST ::= SEQUENCE {
        numProperties_PROPERTYLIST_RTPS ^ numProperties INTEGER (SIZE 4 BYTES),
        list_PROPERTYLIST_RTPS ^ list SET OF PROPERTY_RTPS (SIZE CONSTRAINED)
    } < transfer >
        Forward {CARDINALITY (list_PROPERTYLIST_RTPS) == numProperties_PROPERTYLIST_RTPS}
    </ transfer >
    PROPERTY_RTPS ^ PROPERTY ::= SEQUENCE {
        name_PROPERTY_RTPS ^ name NESTEDSTRING_RTPS (SIZE DEFINED) SLACKMOD4,
        value_PROPERTY_RTPS ^ value NESTEDSTRING_RTPS (SIZE DEFINED) SLACKMOD4
    } PIDPROTOVERSION_RTPS ^ PIDPROTOVERSION @ 2 21 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPROTOVERSION_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPROTOVERSION_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        protocolVersion_PIDPROTOVERSION_RTPS ^ protocolVersion PROTOCOLVERSION_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDPROTOVERSION_RTPS == 21}
        Forward {LENGTH (protocolVersion_PIDPROTOVERSION_RTPS) == parameterLength_PIDPROTOVERSION_RTPS}
    </ transfer >
    PROTOCOLVERSION_RTPS ^ PROTOCOLVERSION ::= SEQUENCE {
        major_PROTOCOLVERSION_RTPS ^ major INTEGER (SIZE 1 BYTES),
        minor_PROTOCOLVERSION_RTPS ^ minor INTEGER (SIZE 1 BYTES)
    } PIDPARTICIPANTGUID_RTPS ^ PIDPARTICIPANTGUID @ 2 80 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPARTICIPANTGUID_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPARTICIPANTGUID_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        participantGuid_PIDPARTICIPANTGUID_RTPS ^ participantGuid PARTICIPANTGUID_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDPARTICIPANTGUID_RTPS == 80}
        Forward {LENGTH (participantGuid_PIDPARTICIPANTGUID_RTPS) == parameterLength_PIDPARTICIPANTGUID_RTPS}
    </ transfer >
    PARTICIPANTGUID_RTPS ^ PARTICIPANTGUID ::= SEQUENCE {
        guid_PARTICIPANTGUID_RTPS ^ guid GUIDPREFIX_RTPS (SIZE DEFINED) BIGENDIAN,
        entityID_PARTICIPANTGUID_RTPS ^ entityID ENTITYID_RTPS (SIZE DEFINED) BIGENDIAN
    } PIDVENDORID_RTPS ^ PIDVENDORID @ 2 22 @ optimizable ::= SEQUENCE {
        parameterKind_PIDVENDORID_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDVENDORID_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        vendor_PIDVENDORID_RTPS ^ vendor VENDORID_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDVENDORID_RTPS == 22}
        Forward {LENGTH (vendor_PIDVENDORID_RTPS) == parameterLength_PIDVENDORID_RTPS}
    </ transfer >
    VENDORID_RTPS ^ VENDORID ::= SEQUENCE {
        vendorID_VENDORID_RTPS ^ vendorID INTEGER (SIZE 2 BYTES)
    } PIDPARTICIPANTBUILTENDPOINTS_RTPS ^ PIDPARTICIPANTBUILTENDPOINTS @ 2 68 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPARTICIPANTBUILTENDPOINTS_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPARTICIPANTBUILTENDPOINTS_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        builtIn_PIDPARTICIPANTBUILTENDPOINTS_RTPS ^ builtIn INTEGER (SIZE 4 BYTES)
    } < transfer >
        Back {parameterKind_PIDPARTICIPANTBUILTENDPOINTS_RTPS == 68}
    </ transfer >
    PIDBUILTINENDPOINTSET_RTPS ^ PIDBUILTINENDPOINTSET @ 2 88 @ optimizable ::= SEQUENCE {
        parameterKind_PIDBUILTINENDPOINTSET_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDBUILTINENDPOINTSET_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        builtIn_PIDBUILTINENDPOINTSET_RTPS ^ builtIn FLAGS_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDBUILTINENDPOINTSET_RTPS == 88}
        Forward {LENGTH (builtIn_PIDBUILTINENDPOINTSET_RTPS) == parameterLength_PIDBUILTINENDPOINTSET_RTPS}
    </ transfer >
    FLAGS_RTPS ^ FLAGS ::= SEQUENCE {
        flags_FLAGS_RTPS ^ flags INTEGER (SIZE 4 BYTES)
    } PIDMETATRAFFICUNILOCATOR_RTPS ^ PIDMETATRAFFICUNILOCATOR @ 2 50 @ optimizable ::= SEQUENCE {
        parameterKind_PIDMETATRAFFICUNILOCATOR_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDMETATRAFFICUNILOCATOR_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        locator_PIDMETATRAFFICUNILOCATOR_RTPS ^ locator LOCATOR_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDMETATRAFFICUNILOCATOR_RTPS == 50}
        Forward {LENGTH (locator_PIDMETATRAFFICUNILOCATOR_RTPS) == parameterLength_PIDMETATRAFFICUNILOCATOR_RTPS}
    </ transfer >
    PIDMETATRAFFICMULTILOCATOR_RTPS ^ PIDMETATRAFFICMULTILOCATOR @ 2 51 @ optimizable ::= SEQUENCE {
        parameterKind_PIDMETATRAFFICMULTILOCATOR_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDMETATRAFFICMULTILOCATOR_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        locator_PIDMETATRAFFICMULTILOCATOR_RTPS ^ locator LOCATOR_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDMETATRAFFICMULTILOCATOR_RTPS == 51}
        Forward {LENGTH (locator_PIDMETATRAFFICMULTILOCATOR_RTPS) == parameterLength_PIDMETATRAFFICMULTILOCATOR_RTPS}
    </ transfer >
    PIDDEFUNILOCATOR_RTPS ^ PIDDEFUNILOCATOR @ 2 49 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDEFUNILOCATOR_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDEFUNILOCATOR_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        locator_PIDDEFUNILOCATOR_RTPS ^ locator LOCATOR_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDDEFUNILOCATOR_RTPS == 49}
        Forward {LENGTH (locator_PIDDEFUNILOCATOR_RTPS) == parameterLength_PIDDEFUNILOCATOR_RTPS}
    </ transfer >
    PIDDEFMULTILOCATOR_RTPS ^ PIDDEFMULTILOCATOR @ 2 72 @ optimizable ::= SEQUENCE {
        parameterKind_PIDDEFMULTILOCATOR_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDDEFMULTILOCATOR_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        locator_PIDDEFMULTILOCATOR_RTPS ^ locator LOCATOR_RTPS (SIZE DEFINED)
    } < transfer >
        Back {parameterKind_PIDDEFMULTILOCATOR_RTPS == 72}
    </ transfer >
    LOCATOR_RTPS ^ LOCATOR ::= SEQUENCE {
        kind_LOCATOR_RTPS ^ kind INTEGER (SIZE 4 BYTES),
        port_LOCATOR_RTPS ^ port INTEGER (SIZE 4 BYTES),
        address_LOCATOR_RTPS ^ address OCTET STRING (SIZE 16 BYTES)
    } PIDPARTICIPANTLIVECOUNT_RTPS ^ PIDPARTICIPANTLIVECOUNT @ 2 52 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPARTICIPANTLIVECOUNT_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPARTICIPANTLIVECOUNT_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        manualLiveCount_PIDPARTICIPANTLIVECOUNT_RTPS ^ manualLiveCount INTEGER (SIZE 4 BYTES)
    } < transfer >
        Back {parameterKind_PIDPARTICIPANTLIVECOUNT_RTPS == 52}
    </ transfer >
    PIDPARTICIPANTLEASE_RTPS ^ PIDPARTICIPANTLEASE @ 2 2 @ optimizable ::= SEQUENCE {
        parameterKind_PIDPARTICIPANTLEASE_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDPARTICIPANTLEASE_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES),
        duration_PIDPARTICIPANTLEASE_RTPS ^ duration LEASEDURATION_RTPS (SIZE DEFINED) SLACK
    } < transfer >
        Back {parameterKind_PIDPARTICIPANTLEASE_RTPS == 2}
        Forward {LENGTH (duration_PIDPARTICIPANTLEASE_RTPS) == parameterLength_PIDPARTICIPANTLEASE_RTPS}
    </ transfer >
    LEASEDURATION_RTPS ^ LEASEDURATION ::= SEQUENCE {
        seconds_LEASEDURATION_RTPS ^ seconds INTEGER (SIZE 4 BYTES),
        fraction_LEASEDURATION_RTPS ^ fraction INTEGER (SIZE 4 BYTES)
    } PIDSENTINAL_RTPS ^ PIDSENTINAL @ 2 1 @ optimizable ::= SEQUENCE {
        parameterKind_PIDSENTINAL_RTPS ^ parameterKind INTEGER (SIZE 2 BYTES),
        parameterLength_PIDSENTINAL_RTPS ^ parameterLength INTEGER (SIZE 2 BYTES)
    } < transfer >
        Back {parameterKind_PIDSENTINAL_RTPS == 1}
    </ transfer >
    ENTITYID_RTPS ^ ENTITYID ::= SEQUENCE {
        key_ENTITYID_RTPS ^ key INTEGER (SIZE 3 BYTES),
        kind_ENTITYID_RTPS ^ kind INTEGER (SIZE 1 BYTES)
    } (ENCODED BY CUSTOM)
    SNSTATE_RTPS ^ SNSTATE ::= SEQUENCE {
        bitmapBase_SNSTATE_RTPS ^ bitmapBase OCTET STRING (SIZE 8 BYTES),
        nmBits_SNSTATE_RTPS ^ nmBits INTEGER (SIZE 4 BYTES),
        bitmap_SNSTATE_RTPS ^ bitmap SLACK_RTPS (SIZE DEFINED) OPTIONAL
    } (ENCODED BY CUSTOM)
    < transfer >
        Forward {EXISTS (bitmap_SNSTATE_RTPS) == nmBits_SNSTATE_RTPS& 15}
    </ transfer >
    SLACK_RTPS ^ SLACK ::= SEQUENCE {
        slack_SLACK_RTPS ^ slack OCTET STRING (SIZE 4 BYTES)
    } (ENCODED BY CUSTOM)

END
